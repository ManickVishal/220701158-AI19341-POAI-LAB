from queue import PriorityQueue

# A* Search Algorithm
def a_star_search(graph, start, goal, h):
    # Priority queue to store nodes with their f(n) value
    open_list = PriorityQueue()
    open_list.put((0, start))
    # Dictionary to keep track of costs and paths
    g_cost = {start: 0}
    came_from = {start: None}

    while not open_list.empty():
        # Get the node with the smallest f(n)
        current_f, current_node = open_list.get()

        # If the goal is reached, reconstruct the path
        if current_node == goal:
            path = []
            while current_node:
                path.append(current_node)
                current_node = came_from[current_node]
            return path[::-1]  # Return reversed path

        # Explore neighbors
        for neighbor, cost in graph[current_node]:
            tentative_g_cost = g_cost[current_node] + cost

            if neighbor not in g_cost or tentative_g_cost < g_cost[neighbor]:
                g_cost[neighbor] = tentative_g_cost
                f_cost = tentative_g_cost + h[neighbor]
                open_list.put((f_cost, neighbor))
                came_from[neighbor] = current_node

    return None  # No path found

# Example graph (Adjacency list with weights)
graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 1), ('E', 4)],
    'C': [('E', 1)],
    'D': [('F', 5)],
    'E': [('F', 2)],
    'F': []
}

# Heuristic values (h(n))
heuristic = {
    'A': 6,
    'B': 4,
    'C': 4,
    'D': 2,
    'E': 2,
    'F': 0
}

# Starting and goal nodes
start_node = 'A'
goal_node = 'F'

# Run A* Search
path = a_star_search(graph, start_node, goal_node, heuristic)
if path:
    print("Path found:", " -> ".join(path))
else:
    print("No path found.")
